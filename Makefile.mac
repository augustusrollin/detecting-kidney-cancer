help:
	@python -c "$$PRINT_HELP_PYSCRIPT" < $(MAKEFILE_LIST)

clean: clean-build clean-pyc clean-test ## remove all build, test, coverage and Python artifacts

clean-build: ## remove build artifacts
	@rm -fr build/
	@rm -fr dist/
	@rm -fr .eggs/
	@find . -name '*.egg-info' -exec rm -fr {} +
	@find . -name '*.egg' -exec rm -f {} +

clean-pyc: ## remove Python file artifacts
	@find . -name '*.pyc' -exec rm -f {} +
	@find . -name '*.pyo' -exec rm -f {} +
	@find . -name '*~' -exec rm -f {} +
	@find . -name '__pycache__' -exec rm -fr {} +

clean-test: ## remove test and coverage artifacts
	@rm -f .coverage
	@rm -fr coverage-reports/
	@rm -fr .pytest_cache

lint: ## check style with flake8
	@flake8 --config=.flake8 src/rebind/copilot tests

format:
	black src/rebind/copilot tests

full-format:
	black .
	isort .
	flake8 .

check: format lint coverage

installed:
	pip freeze > reqs.txt
	code reqs.txt

install-pre-commit:
	.venv/bin/pre-commit install

uninstall-pre-commit:
	.venv/bin/pre-commit uninstall

test:
	@ PYTHONPATH=".:src/:tests/" pytest -s -rPx tests/

focus:
	@ PYTHONPATH=".:src/:tests/" pytest -s -rPx tests/.py

train:
	@ PYTHONPATH=".:src/:tests/" pytest -s -rPx tests/test_training.py

evaluate:
	@ PYTHONPATH=".:src/:tests/" pytest -s -rPx tests/test_evaluation.py

data-aug:
	@ PYTHONPATH=".:src/:tests/" pytest -s -rPx tests/test_data_distribution.py

pipeline:
	@ PYTHONPATH=".:src/:tests/" pytest -s -rPx tests/test_pipeline.py

detect: train evaluate
